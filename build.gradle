plugins {
    id 'java'
    id 'org.springframework.boot' version "${versionSpringBoot}"
    id 'io.spring.dependency-management' version "${versionSpringDependencyManagement}"
}

group = 'br.com.fiaprestaurant'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    implementation 'org.flywaydb:flyway-core'
    implementation "io.jsonwebtoken:jjwt:${versionJjwt}"
    implementation "com.auth0:java-jwt:${versionJavaJwt}"
    implementation "org.hamcrest:hamcrest:${versionHamcrest}"
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test:${versionSpringSecurityTest}"
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "org.testcontainers:postgresql"
    testImplementation "com.tngtech.archunit:archunit:${versionArchUnit}"
    testImplementation "io.rest-assured:spring-mock-mvc:${versionRestAssuredSpringMockMvc}"
    testImplementation "io.rest-assured:rest-assured:${versionRestAssuredRestAssured}"
    testImplementation "io.rest-assured:json-schema-validator:${versionRestAssuredRestAssured}"
}

tasks.withType(Test) {
    description = 'Runs the unit tests.'
    group = 'verification'
    useJUnitPlatform(){}
}

tasks.register("bootJarDev") {
    group = "build"
    description = "Runs the Spring Boot application with the dev profile"
    doFirst {
        tasks.bootRun.configure {
            systemProperty("spring.profiles.active", "dev")
        }
    }
    finalizedBy("bootJar")
}

tasks.register("bootJarProd") {
    group = "build"
    description = "Runs the Spring Boot application with the prod profile"
    doFirst {
        tasks.bootRun.configure {
            systemProperty("spring.profiles.active", "prod")
        }
    }
    finalizedBy("bootJar")
}

/*
tasks.withType(Test) {
    description = 'Runs the unit tests.'
    group = 'verification'
    useJUnitPlatform({
        excludeTags 'integrationTest'
    })
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    useJUnitPlatform {
        includeTags 'integrationTest'
    }
}
*/
